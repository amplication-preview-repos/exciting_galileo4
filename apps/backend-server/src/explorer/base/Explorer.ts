/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsDate,
  IsOptional,
  MaxLength,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { Accommodation } from "../../accommodation/base/Accommodation";
import { Activity } from "../../activity/base/Activity";
import { Commission } from "../../commission/base/Commission";

@ObjectType()
class Explorer {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  password!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Accommodation],
  })
  @ValidateNested()
  @Type(() => Accommodation)
  @IsOptional()
  accommodations?: Array<Accommodation>;

  @ApiProperty({
    required: false,
    type: () => [Activity],
  })
  @ValidateNested()
  @Type(() => Activity)
  @IsOptional()
  activities?: Array<Activity>;

  @ApiProperty({
    required: false,
    type: () => [Commission],
  })
  @ValidateNested()
  @Type(() => Commission)
  @IsOptional()
  commissions?: Array<Commission>;
}

export { Explorer as Explorer };
