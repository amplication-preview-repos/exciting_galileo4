/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Explorer } from "./Explorer";
import { ExplorerCountArgs } from "./ExplorerCountArgs";
import { ExplorerFindManyArgs } from "./ExplorerFindManyArgs";
import { ExplorerFindUniqueArgs } from "./ExplorerFindUniqueArgs";
import { CreateExplorerArgs } from "./CreateExplorerArgs";
import { UpdateExplorerArgs } from "./UpdateExplorerArgs";
import { DeleteExplorerArgs } from "./DeleteExplorerArgs";
import { AccommodationFindManyArgs } from "../../accommodation/base/AccommodationFindManyArgs";
import { Accommodation } from "../../accommodation/base/Accommodation";
import { ActivityFindManyArgs } from "../../activity/base/ActivityFindManyArgs";
import { Activity } from "../../activity/base/Activity";
import { CommissionFindManyArgs } from "../../commission/base/CommissionFindManyArgs";
import { Commission } from "../../commission/base/Commission";
import { ExplorerService } from "../explorer.service";
@graphql.Resolver(() => Explorer)
export class ExplorerResolverBase {
  constructor(protected readonly service: ExplorerService) {}

  async _explorersMeta(
    @graphql.Args() args: ExplorerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Explorer])
  async explorers(
    @graphql.Args() args: ExplorerFindManyArgs
  ): Promise<Explorer[]> {
    return this.service.explorers(args);
  }

  @graphql.Query(() => Explorer, { nullable: true })
  async explorer(
    @graphql.Args() args: ExplorerFindUniqueArgs
  ): Promise<Explorer | null> {
    const result = await this.service.explorer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Explorer)
  async createExplorer(
    @graphql.Args() args: CreateExplorerArgs
  ): Promise<Explorer> {
    return await this.service.createExplorer({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Explorer)
  async updateExplorer(
    @graphql.Args() args: UpdateExplorerArgs
  ): Promise<Explorer | null> {
    try {
      return await this.service.updateExplorer({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Explorer)
  async deleteExplorer(
    @graphql.Args() args: DeleteExplorerArgs
  ): Promise<Explorer | null> {
    try {
      return await this.service.deleteExplorer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Accommodation], { name: "accommodations" })
  async findAccommodations(
    @graphql.Parent() parent: Explorer,
    @graphql.Args() args: AccommodationFindManyArgs
  ): Promise<Accommodation[]> {
    const results = await this.service.findAccommodations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Activity], { name: "activities" })
  async findActivities(
    @graphql.Parent() parent: Explorer,
    @graphql.Args() args: ActivityFindManyArgs
  ): Promise<Activity[]> {
    const results = await this.service.findActivities(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Commission], { name: "commissions" })
  async findCommissions(
    @graphql.Parent() parent: Explorer,
    @graphql.Args() args: CommissionFindManyArgs
  ): Promise<Commission[]> {
    const results = await this.service.findCommissions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
