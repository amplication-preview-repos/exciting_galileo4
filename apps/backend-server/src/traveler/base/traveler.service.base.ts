/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Traveler as PrismaTraveler,
  Booking as PrismaBooking,
} from "@prisma/client";

export class TravelerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TravelerCountArgs, "select">): Promise<number> {
    return this.prisma.traveler.count(args);
  }

  async travelers(
    args: Prisma.TravelerFindManyArgs
  ): Promise<PrismaTraveler[]> {
    return this.prisma.traveler.findMany(args);
  }
  async traveler(
    args: Prisma.TravelerFindUniqueArgs
  ): Promise<PrismaTraveler | null> {
    return this.prisma.traveler.findUnique(args);
  }
  async createTraveler(
    args: Prisma.TravelerCreateArgs
  ): Promise<PrismaTraveler> {
    return this.prisma.traveler.create(args);
  }
  async updateTraveler(
    args: Prisma.TravelerUpdateArgs
  ): Promise<PrismaTraveler> {
    return this.prisma.traveler.update(args);
  }
  async deleteTraveler(
    args: Prisma.TravelerDeleteArgs
  ): Promise<PrismaTraveler> {
    return this.prisma.traveler.delete(args);
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.traveler
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }
}
