/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Traveler } from "./Traveler";
import { TravelerCountArgs } from "./TravelerCountArgs";
import { TravelerFindManyArgs } from "./TravelerFindManyArgs";
import { TravelerFindUniqueArgs } from "./TravelerFindUniqueArgs";
import { CreateTravelerArgs } from "./CreateTravelerArgs";
import { UpdateTravelerArgs } from "./UpdateTravelerArgs";
import { DeleteTravelerArgs } from "./DeleteTravelerArgs";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { TravelerService } from "../traveler.service";
@graphql.Resolver(() => Traveler)
export class TravelerResolverBase {
  constructor(protected readonly service: TravelerService) {}

  async _travelersMeta(
    @graphql.Args() args: TravelerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Traveler])
  async travelers(
    @graphql.Args() args: TravelerFindManyArgs
  ): Promise<Traveler[]> {
    return this.service.travelers(args);
  }

  @graphql.Query(() => Traveler, { nullable: true })
  async traveler(
    @graphql.Args() args: TravelerFindUniqueArgs
  ): Promise<Traveler | null> {
    const result = await this.service.traveler(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Traveler)
  async createTraveler(
    @graphql.Args() args: CreateTravelerArgs
  ): Promise<Traveler> {
    return await this.service.createTraveler({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Traveler)
  async updateTraveler(
    @graphql.Args() args: UpdateTravelerArgs
  ): Promise<Traveler | null> {
    try {
      return await this.service.updateTraveler({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Traveler)
  async deleteTraveler(
    @graphql.Args() args: DeleteTravelerArgs
  ): Promise<Traveler | null> {
    try {
      return await this.service.deleteTraveler(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Booking], { name: "bookings" })
  async findBookings(
    @graphql.Parent() parent: Traveler,
    @graphql.Args() args: BookingFindManyArgs
  ): Promise<Booking[]> {
    const results = await this.service.findBookings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
