/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Accommodation } from "./Accommodation";
import { AccommodationCountArgs } from "./AccommodationCountArgs";
import { AccommodationFindManyArgs } from "./AccommodationFindManyArgs";
import { AccommodationFindUniqueArgs } from "./AccommodationFindUniqueArgs";
import { CreateAccommodationArgs } from "./CreateAccommodationArgs";
import { UpdateAccommodationArgs } from "./UpdateAccommodationArgs";
import { DeleteAccommodationArgs } from "./DeleteAccommodationArgs";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { Explorer } from "../../explorer/base/Explorer";
import { Host } from "../../host/base/Host";
import { AccommodationService } from "../accommodation.service";
@graphql.Resolver(() => Accommodation)
export class AccommodationResolverBase {
  constructor(protected readonly service: AccommodationService) {}

  async _accommodationsMeta(
    @graphql.Args() args: AccommodationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Accommodation])
  async accommodations(
    @graphql.Args() args: AccommodationFindManyArgs
  ): Promise<Accommodation[]> {
    return this.service.accommodations(args);
  }

  @graphql.Query(() => Accommodation, { nullable: true })
  async accommodation(
    @graphql.Args() args: AccommodationFindUniqueArgs
  ): Promise<Accommodation | null> {
    const result = await this.service.accommodation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Accommodation)
  async createAccommodation(
    @graphql.Args() args: CreateAccommodationArgs
  ): Promise<Accommodation> {
    return await this.service.createAccommodation({
      ...args,
      data: {
        ...args.data,

        explorer: args.data.explorer
          ? {
              connect: args.data.explorer,
            }
          : undefined,

        host: args.data.host
          ? {
              connect: args.data.host,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Accommodation)
  async updateAccommodation(
    @graphql.Args() args: UpdateAccommodationArgs
  ): Promise<Accommodation | null> {
    try {
      return await this.service.updateAccommodation({
        ...args,
        data: {
          ...args.data,

          explorer: args.data.explorer
            ? {
                connect: args.data.explorer,
              }
            : undefined,

          host: args.data.host
            ? {
                connect: args.data.host,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Accommodation)
  async deleteAccommodation(
    @graphql.Args() args: DeleteAccommodationArgs
  ): Promise<Accommodation | null> {
    try {
      return await this.service.deleteAccommodation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Booking], { name: "bookings" })
  async findBookings(
    @graphql.Parent() parent: Accommodation,
    @graphql.Args() args: BookingFindManyArgs
  ): Promise<Booking[]> {
    const results = await this.service.findBookings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Explorer, {
    nullable: true,
    name: "explorer",
  })
  async getExplorer(
    @graphql.Parent() parent: Accommodation
  ): Promise<Explorer | null> {
    const result = await this.service.getExplorer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Host, {
    nullable: true,
    name: "host",
  })
  async getHost(@graphql.Parent() parent: Accommodation): Promise<Host | null> {
    const result = await this.service.getHost(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
