/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Host as PrismaHost,
  Accommodation as PrismaAccommodation,
  Activity as PrismaActivity,
} from "@prisma/client";

export class HostServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.HostCountArgs, "select">): Promise<number> {
    return this.prisma.host.count(args);
  }

  async hosts(args: Prisma.HostFindManyArgs): Promise<PrismaHost[]> {
    return this.prisma.host.findMany(args);
  }
  async host(args: Prisma.HostFindUniqueArgs): Promise<PrismaHost | null> {
    return this.prisma.host.findUnique(args);
  }
  async createHost(args: Prisma.HostCreateArgs): Promise<PrismaHost> {
    return this.prisma.host.create(args);
  }
  async updateHost(args: Prisma.HostUpdateArgs): Promise<PrismaHost> {
    return this.prisma.host.update(args);
  }
  async deleteHost(args: Prisma.HostDeleteArgs): Promise<PrismaHost> {
    return this.prisma.host.delete(args);
  }

  async findAccommodations(
    parentId: string,
    args: Prisma.AccommodationFindManyArgs
  ): Promise<PrismaAccommodation[]> {
    return this.prisma.host
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .accommodations(args);
  }

  async findActivities(
    parentId: string,
    args: Prisma.ActivityFindManyArgs
  ): Promise<PrismaActivity[]> {
    return this.prisma.host
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .activities(args);
  }
}
